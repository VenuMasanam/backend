import React, { useState, useEffect, useCallback } from 'react';
import axios from 'axios';
import { format } from 'date-fns';
import { ProgressBar as BootstrapProgressBar } from 'react-bootstrap';
import { useParams } from 'react-router-dom';
import EmployeeSidebar from './EmployeeSidebar'; // Import EmployeeSidebar
import './EmployeeInterface.css';
import 'bootstrap/dist/css/bootstrap.min.css'; // Ensure Bootstrap CSS is imported

const EmployeeInterface = () => {
      const { assignEmail} = useParams();
    const [tasks, setTasks] = useState([]);
    const [error, setError] = useState('');
    
    // Ensure consistency in how you retrieve logged-in user's email
    const loggedInEmail = localStorage.getItem('loggedInEmail');

    // Function to fetch tasks assigned to the logged-in employee
    const fetchEmployeeTasks = useCallback(async () => {
    if (!loggedInEmail) {
        console.error('Error: No logged-in email found');
        setError('No logged-in email found. Please log in again.');
        return;
    }

    try {
        const res = await axios.get(`http://localhost:5000/api/employee-tasks?email=${loggedInEmail}`);
        const fetchedTasks = res.data;
        console.log(fetchedTasks);

        // Filter tasks based on the assigned email
        const assignedTasks = fetchedTasks.filter(task => task.assignEmail === loggedInEmail);

        const updatedTasks = await Promise.all(
            assignedTasks.map(async (task) => {
                try {
                    const storedProgress = localStorage.getItem(`progress-${task._id}`);
                    const totalDays = Math.ceil(
                        (new Date(task.endDate) - new Date(task.startDate)) / (1000 * 60 * 60 * 24),
                        console.log(task.endDate)
                    );
                    const countRes = await axios.get(`http://localhost:5000/api/data/${loggedInEmail}/count`);
                    const submissionCount = countRes.data.count;
                    const calculatedProgress = (submissionCount / totalDays) * 100 || 0;
                    const progress = storedProgress ? Number(storedProgress) : calculatedProgress;

                    return {
                        ...task,
                        progress: Math.min(progress, 100),
                    };
                } catch (error) {
                    console.error(`Error fetching submission count for ${task.assignEmail}:`, error);
                    return task;
                }
            })
        );

        setTasks(updatedTasks);
    } catch (err) {
        console.error('Error fetching tasks:', err.response ? err.response.data : err.message);
        setError('Error fetching tasks');
    }
}, [loggedInEmail]);


    // Save progress in localStorage when it changes
    const saveProgress = (taskId, progress) => {
        localStorage.setItem(`progress-${taskId}`, progress);
    };

    // Fetch tasks on component mount
    useEffect(() => {
        fetchEmployeeTasks();
    }, [fetchEmployeeTasks]);

    // 'Claim Task' button handler (dummy functionality for now)
    const handleClaimTask = (taskId) => {
        console.log(`Claim Task clicked for Task ID: ${taskId}`);
    };

    return (
        <div className="employee-interface">
            <EmployeeSidebar />
            <div className="content-wrapper">
                <h2 className="module-heading">My Tasks</h2>

                {error && <div className="alert alert-danger">{error}</div>}

                <div className="todo-list">
                    {tasks.length > 0 ? (
                        <ul className="list-group">
                            {tasks.map((task) => {
                                const progress = task.progress ?? 0;
                                saveProgress(task._id, progress);

                                const formattedStartDate = format(new Date(task.startDate), 'dd MMM yyyy');
                                const formattedEndDate = format(new Date(task.endDate), 'dd MMM yyyy');

                                return (
                                    <li key={task._id} className="list-group-item task-item">
                                        <div className="task-card">
                                            <div className="task-details">
                                                <h4 className="task-name">{task.taskName}</h4>
                                                <p className="task-date">
                                                    <strong>Assigned to mail:</strong> {task.assignEmail}
                                                </p>
                                                <p className="task-date">
                                                    <strong>Start Date:</strong> {formattedStartDate}
                                                </p>
                                                <p className="task-date">
                                                    <strong>Deadline:</strong> {formattedEndDate}
                                                </p>
                                            </div>
                                            <div className="task-progress">
                                                <p><b>Task Progress:</b></p>
                                                <BootstrapProgressBar now={progress} label={`${Math.round(progress)}%`} />
                                            </div>
                                            <button
                                                onClick={() => handleClaimTask(task._id)}
                                                className="btn btn-primary btn-sm">
                                                Claim Task
                                            </button>
                                        </div>
                                    </li>
                                );
                            })}
                        </ul>
                    ) : (
                        <p>No tasks available</p>
                    )}
                </div>
            </div>
        </div>
    );
};

export default EmployeeInterface;



-----------------------------------------------------------------------------------------------------------------
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import './CreateTask.css';
import axios from 'axios';
import EmployeeSidebar from './EmployeeSidebar';
import Sidebar from './Sidebar';
import {notification} from 'antd';


const CreateTask = () => {
    const [teamLead, setTeamLead] = useState('');
    const [taskName, setTaskName] = useState('');
    const [assignEmail, setAssignEmail] = useState('');
    const [startDate, setStartDate] = useState('');
    const [endDate, setEndDate] = useState('');
    const [taskFile, setTaskFile] = useState(null);
    const [moduleId, setModuleId] = useState('');
    const [fileName,setfileName]=useState('')
    const navigate = useNavigate();


    const handleFileChange = (e) => {
       const file=(e.target.files[0]);
       if(file){
        setfileName(file.name)
        setTaskFile(file)
       }
    };

    

    const handleSubmit = async (e) => {
        e.preventDefault();
        const formData = new FormData();
        formData.append('taskName', taskName);
        formData.append('assignEmail', assignEmail);
        formData.append('startDate', startDate);
        formData.append('endDate', endDate);
        formData.append('moduleId', moduleId);
        if (taskFile) {
            formData.append('taskFile', taskFile);
        }
    
        try {
            const token = localStorage.getItem('userToken'); // Ensure token exists
            console.log('Sending token:', token); // Debugging log
    
            const response = await axios.post(`${process.env.REACT_APP_URL}/api/tasks`, formData, {
                headers: {
                    'Content-Type': 'multipart/form-data',
                    'Authorization': `Bearer ${token}`,
                },
            });
            notification.success({message:"Task created successfully"});
            // console.log('Response:', response);
            navigate("/Team-lead-interface")
           
        } catch (error) {
            console.error('Error creating task:', error.response ? error.response.data : error.message);
        }
    };
    
    

    return (
        <div className="create-task-container">
        <div>
            <Sidebar />
        </div>
            <h2>Create Task</h2>
            <form onSubmit={handleSubmit}>
                
                <input
                    type="text"
                    placeholder="Employee Task Name"
                    value={taskName}
                    onChange={(e) => setTaskName(e.target.value)}
                    required
                />

               
                <input
                    type="email"
                    placeholder="Assignd Email"
                    value={assignEmail}
                    onChange={(e) => setAssignEmail(e.target.value)}
                    required
                />

                <input
                    type="text"
                    placeholder="Module ID"
                    value={moduleId}
                    onChange={(e) => setModuleId(e.target.value)}
                    required
                />

                <label>Project Documents</label>
                <input  className='bg-secondary rounded'
                    type="file"
                    accept=".pdf,.doc,.docx,.txt,.jpg,.jpeg,.png"
                    onChange={handleFileChange}
                    placeholder={fileName}
                    required
                />
                {/* {fileName && <p>Selected file: {fileName}</p>} */}

                <label>Start Date</label>
                <input
                    type="date"
                    value={startDate}
                    onChange={(e) => setStartDate(e.target.value)}
                    required
                />

                <label>End Date</label>
                <input
                    type="date"
                    value={endDate}
                    onChange={(e) => setEndDate(e.target.value)}
                    required
                />

               <center>
               <div className="button-group  ">
                    <button type="button" className="back-btn m-4 bg-warning px-3" onClick={() => navigate(-1)}>cancil</button>
                    <button type="submit" className="submit-btn px-2 mt-4 my-4">Create Task</button>
                </div>
               </center>
            </form>
        </div>
    );
};

export default CreateTask;


---------------------------------------------------------------------------------------------------------------------------
// routes/task.js
const express = require('express');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const nodemailer = require('nodemailer');
const Data = require('../models/Data');
const Task = require('../models/Task');
const upload = require('../middleware/uploads');
const mime = require('mime-types');
const User = require('../models/User');
const authMiddleware = require('../middleware/authMiddleware'); // Ensure you have an auth middleware



const router = express.Router();


// Ensure the uploads folder exists
const uploadDirectory = path.join(__dirname, '../uploads');
if (!fs.existsSync(uploadDirectory)) {
    fs.mkdirSync(uploadDirectory, { recursive: true });
}

// Multer configuration for file uploads
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, uploadDirectory);
    },
    filename: (req, file, cb) => {
        cb(null, Date.now() + '-' + file.originalname);
    }
});



// Create transporter object using nodemailer for sending emails
const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS
    }
});


//fetch the task based on the team-lead T_id
router.get("/tasks", authMiddleware, async (req, res) => {
  try {
      // Only allow team leads
      if (req.user.role !== "team-lead") {
          return res.status(403).json({ error: "Access denied. Only team leads can fetch tasks." });
      }
    //  console.log("id:",req.user.id)
     const task = await User.findById(req.user.id)
     const data=task.team_id
    //  console.log("T_id:",data)
      const tasks = await Task.find({team_id:data});
      res.json(tasks);
  } catch (err) {
      res.status(500).json({ error: "Internal Server Error" });
  }
});


const sendTaskEmail = async ({ taskName, assignEmail, startDate, endDate, taskFile, team_id, moduleId, req }, retries = 3) => {
    const fileUrl = `${req.protocol}://${req.get('host')}/uploads/${path.basename(taskFile)}`;

    const mailOptions = {
        from: process.env.EMAIL_USER,
        to: assignEmail,
        subject: 'New Task Assigned',
        html: `
            <div style="font-family: Arial; max-width: 600px; padding: 20px; border: 1px solid #ddd;">
                <h2 style="color: #4CAF50;">New Task Assigned</h2>
                <p>You have been assigned a new task. Please find the details below:</p>
                <p><strong>Task Name:</strong> ${taskName}</p>
                <p><strong>Email:</strong> ${assignEmail}</p>
                <p><strong>Module ID:</strong> ${moduleId}</p>  <!-- New Module ID field in email -->
                <p><strong>Start Date:</strong> ${startDate}</p>
                <p><strong>End Date:</strong> ${endDate}</p>
                <p><strong>ID:</strong> ${team_id}</p>
                <p>You can download the task file <a href="${fileUrl}">here</a>.</p>
                <p>Best regards,<br>Team Management System</p>
            </div>
        `,
        attachments: taskFile ? [{ filename: path.basename(taskFile), path: taskFile }] : []
    };

    try {
        await transporter.sendMail(mailOptions);
        console.log('Email sent successfully to:', assignEmail);
    } catch (error) {
        console.error('Error sending email:', error);
        if (retries > 0 && error.code === 'ECONNRESET') {
            console.log(`Retrying... Attempts left: ${retries - 1}`);
            await new Promise(res => setTimeout(res, 2000));
            return sendTaskEmail({ taskName, assignEmail, startDate, endDate, taskFile, team_id, moduleId, req }, retries - 1);
        }
    }
};

router.post('/tasks', authMiddleware, upload.single('taskFile'), async (req, res) => {
  const {assignEmail, taskName, startDate, endDate, moduleId } = req.body;
  const taskFile = req.file ? req.file.path : null;

  try {
     

      // Find the logged-in user in the database
      const user = await User.findById(req.user.id);  // Fix: Use findById

      if (!user) {
          return res.status(404).json({ error: 'User not found' });
      }

      // console.log("User found:", user);

      // Get T_id from the user
      const team_id = user.team_id;
      // console.log("User T_id:", team_id);

      // Check for missing taskFile
      if (!taskFile) {
          return res.status(400).json({ error: 'Task file is required' });
      }

      // Create a new task with T_id
      const newTask = new Task({ taskName, startDate, endDate, taskFile, team_id, moduleId,assignEmail });
      await newTask.save();

      res.status(201).json({ message: 'Task created successfully', task: newTask });
  } catch (err) {
      console.error("Error creating task:", err);
      res.status(500).json({ error: 'Error creating task', details: err.message });
  }
});

// Get logged-in user's details
router.get('/logged-user',authMiddleware, async (req, res) => {
  try {
      const userId = req.user.id; // Extract user ID from the token
      const user = await User.findById(userId).select('name email'); // Fetch name & email

      if (!user) {
          return res.status(404).json({ error: 'User not found' });
      }

      res.json({ name: user.name, email: user.email });
  } catch (error) {
      console.error('Error fetching user:', error);
      res.status(500).json({ error: 'Internal server error' });
  }
});


// Fetch task based on email (assignEmail in the database)
router.get('/tasks',authMiddleware, async (req, res) => {
   
    // console.log( req.user.email," :email ")

    try {
        // Find the task by assigned email (assignEmail)
        const task = await Task.find({ assignEmail: req.user.email });

        // If no task is found, return a 404 error
        if (!task) {
            return res.status(404).json({ message: 'Task not found' });
        }

        // If the task is found, return it
        res.status(200).json(task);
    } catch (error) {
        console.error('Error fetching task:', error);
        res.status(500).json({ message: 'Server error', error: error.message });
    }
});

router.get('/task',authMiddleware, async (req, res) => {
  
  // console.log( req.user.email," :email ")
  try {
      // Find the task by assigned email (assignEmail)
      const task = await Task.find({ assignEmail: req.user.email});

      // If no task is found, return a 404 error
      if (!task) {
          return res.status(404).json({ message: 'Task not found' });
      }

      // If the task is found, return it
      res.status(200).json(task);
  } catch (error) {
      console.error('Error fetching task:', error);
      res.status(500).json({ message: 'Server error', error: error.message });
  }
});


// Route to fetch task details by moduleID
router.get('/tasks/:moduleID', async (req, res) => {
  const { moduleID } = req.params; // Extract moduleID from URL parameter

  try {
    // Find the task by moduleID
    const task = await Task.findOne({ moduleId: moduleID });

    if (!task) {
      return res.status(404).json({ message: 'Task not found' });
    }

    // Return the task data
    res.status(200).json(task);
  } catch (error) {
    console.error('Error fetching task details:', error);
    res.status(500).json({ message: 'Server error' });
  }
});



//   const { email } = req.params;

//   try {
//     // Find the task by moduleId
//     const task = await Task.findOne({ assignEmail:email });

//     if (!task) {
//       return res.status(404).json({ message: 'Task not found' });
//     }

//     // Count the number of submissions
//     const submissionCount = task.submissions.length;

//     res.status(200).json({ count: submissionCount });
//   } catch (error) {
//     console.error('Error fetching submission count:', error);
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// router.post('/data', upload.single('file'), async (req, res) => {
//   const { moduleId, dayIndex } = req.body;

//   if (!req.file) {
//     return res.status(400).send('No file uploaded');
//   }

//   try {
//     const newData = new Data({
//       moduleId,
//       dayIndex,
//       fileUrl: req.file.path // Save the file path
//     });

//     await newData.save();

//     res.status(200).send('File uploaded and data saved successfully');
//   } catch (error) {
//     console.error('Error saving data:', error);
//     res.status(500).send('Failed to save data');
//   }
// });


// router.post('/data', upload.single('file'), async (req, res) => {
//   const { moduleId, dayIndex, assignEmail } = req.body;

//   if (!req.file) {
//     return res.status(400).send('No file uploaded');
//   }

//   try {
//     // Save submission to the data collection
//     const newData = new Data({
//       moduleId,
//       assignEmail,
//       dayIndex,
//       fileUrl: req.file.path // Save the file path
//     });

//     await newData.save();

//     // Update the task with the new submission
//     const task = await Task.findOne({ moduleId, assignEmail });
//     if (task) {
//       task.submissions.push({
//         filePath: req.file.path,
//         assignedEmail: assignEmail,
//         day: `Day-${dayIndex}`,
//       });
//       await task.save();
//     }

//     res.status(200).send('File uploaded and data saved successfully');
//   } catch (error) {
//     console.error('Error saving data:', error);
//     res.status(500).send('Failed to save data');
//   }
// });

// POST endpoint for submitting a task

// Get task by moduleId
router.get('/task-modules/:moduleId', async (req, res) => {
  try {
      const { moduleId } = req.params;

      // Find the task by moduleId
      const task = await Task.findOne({ moduleId });

      if (!task) {
          return res.status(404).json({ message: 'Task not found' });
      }
      
      res.json(task);
  } catch (error) {
      console.error('Error fetching task:', error);
      res.status(500).json({ message: 'Internal server error' });
  }
});


router.post('/submit-task', upload.single('file'), async (req, res) => {
  try {
    // Extract data from the request body
    const { moduleId, assignEmail, dayIndex } = req.body;

    // Ensure a file is uploaded
    if (!req.file) {
      return res.status(400).json({ message: 'File is required' });
    }
    
    const fileUrl = req.file.path; // Get the file path from multer

    // Validate input data
    if (!moduleId || !assignEmail || !dayIndex) {
      return res.status(400).json({ message: 'All fields are required' });
    }

    // Fetch task details
    const taskData = await Task.findOne({ assignEmail });

    if (!taskData) {
      return res.status(404).json({ message: 'Task not found for the given email' });
    }

    const team_id = taskData.team_id;  // Extract T_id from the found task

    // Step 1: Save the data into the Data collection
    const newData = new Data({
      moduleId,
      assignEmail,
      dayIndex,
      fileUrl,
      team_id
    });

    await newData.save();

    // Step 2: Update the Tasks collection
    const submission = {
      filePath: fileUrl,
      assignedEmail: assignEmail,
      day: dayIndex.toString(), // Convert to string if necessary
    };

    const task = await Task.findOne({ moduleId, assignEmail });

    if (!task) {
      return res.status(404).json({ message: 'No matching task found' });
    }

    const result = await Task.updateOne(
      { moduleId, assignEmail },
      { $push: { submissions: submission } }
    );

    if (result.matchedCount === 0) {
      console.error('No matching document found');
    }

    // Step 3: Respond with success message
    return res.status(200).json({ message: 'Task submitted successfully' });

  } catch (error) {
    console.error('Error in /submit-task:', error);
    return res.status(500).json({ message: 'Server error', error: error.message });
  }
});

router.get('/data/:moduleId/count', async (req, res) => {
  try {
    const { moduleId } = req.params;
    // console.log(moduleId)

    // Validate input
    if (!moduleId) {
      return res.status(400).json({ message: 'Module ID is required' });
    }

    // Find the task document by moduleId and get the count of submissions
    const task = await Task.findOne({ moduleId });

    if (!task) {
      return res.status(404).json({ message: 'Task not found for the given module ID' });
    }

    // Get the count of submissions
    const submissionsCount = task.submissions.length;
    // console.log(submissionsCount)

    // Respond with the count
    res.status(200).json({ count: submissionsCount });

  } catch (error) {
    console.error('Error fetching submissions count:', error);
    return res.status(500).json({ message: 'Server error', error: error.message });
  }
});

// DELETE route to delete a task by ID (use the correct field, e.g., _id)
router.delete('/tasks/:taskId', async (req, res) => {
  const { taskId } = req.params; // Extract taskId from URL parameter

  try {
    // Find and delete the task by _id
    const deletedTask = await Task.findByIdAndDelete(taskId);

    // If no task is found, return a 404 error
    if (!deletedTask) {
      return res.status(404).json({ message: 'Task not found' });
    }

    // Return a success message
    res.status(200).json({ message: 'Task deleted successfully', deletedTask });
  } catch (error) {
    console.error('Error deleting task:', error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
});

router.get('/files/:moduleId', async (req, res) => {
  try {
    const { moduleId } = req.params;

    // Validate moduleId
    if (!moduleId) {
      return res.status(400).json({ message: 'Module ID is required' });
    }

    // Fetch files from the database by moduleId
    const files = await Data.find({ moduleId }).select('dayIndex fileUrl -_id'); // Only include dayIndex and fileUrl fields

    if (files.length === 0) {
      return res.status(404).json({ message: 'No files found for the given Module ID' });
    }

    // Respond with the file data
    return res.status(200).json({
      success: true,
      message: 'Files retrieved successfully',
      files,
    });
  } catch (error) {
    console.error('Error fetching files:', error);
    return res.status(500).json({
      success: false,
      message: 'Internal server error',
      error: error.message,
    });
  }
});

router.get('/download-file/:moduleId/:dayIndex', async (req, res) => {
  try {
    const { moduleId, dayIndex } = req.params;

    console.log(`Downloading file for Module ID: ${moduleId}, Day Index: ${dayIndex}`);

    // Fetch the file record from MongoDB
    const file = await Data.findOne({ moduleId, dayIndex });

    if (!file) {
      console.error('File record not found in database');
      return res.status(404).json({ message: 'File not found in database' });
    }

    // If file is stored in an external URL, redirect the user
    if (file.fileUrl.startsWith('http')) {
      console.log('File is stored on an external server, redirecting...');
      return res.redirect(file.fileUrl);
    }

    // Construct the absolute file path
    const filePath = path.join(__dirname, '..', 'uploads', path.basename(file.fileUrl));


    // console.log(`File path resolved: ${filePath}`);

    // Check if the file actually exists
    if (!fs.existsSync(filePath)) {
      console.error('File not found on server:', filePath);
      return res.status(404).json({ message: 'File not found on server' });
    }

    // Determine MIME type
    const mimeType = mime.lookup(filePath) || 'application/octet-stream';
    console.log(`MIME Type detected: ${mimeType}`);

    // Set headers to ensure the correct file is downloaded
    res.setHeader('Content-Type', mimeType);
    res.setHeader('Content-Disposition', `attachment; filename="${path.basename(filePath)}"`);

    // Send the file for download
    return res.download(filePath, (err) => {
      if (err) {
        console.error('Error sending file:', err);
        return res.status(500).json({ message: 'Error downloading file' });
      }
    });
  } catch (error) {
    console.error('Error fetching file for download:', error);
    return res.status(500).json({ message: 'Internal server error', error: error.message });
  }
});




module.exports = router;
---------------------------------------------------------------------------------------------------------------------------------

import React, { useState } from 'react';
import useFetchTask from './useFetchTask'; // Custom hook for fetching task
import Progressbar from './progressbar';
import EmployeeSidebar from './EmployeeSidebar';
import './EmployeeInterface.css';
import { format } from 'date-fns';
import {message, notification} from 'antd'

const TaskModules = () => {
  const { task, loading, error } = useFetchTask(); // Fetch task by the logged-in email
  const handleSubmission = async (dayIndex) => {
  const fileInput = document.getElementById(`file-input-Day-${dayIndex}`);
    const file = fileInput?.files[0];
    

  if (!file) {
    notification.info({message:'Please select a file to upload.'});
    return;
    }
   const assignEmail =  task?.assignEmail; // Ensure this variable has a valid value
 // Replace `user` with the appropriate context or state holding the email
  if (!assignEmail) {
    notification.info({message:'User email is missing.'});
    return;
  }

  const formData = new FormData();
  formData.append('file', file);
  formData.append('moduleId', task.moduleId); // Ensure this is valid
  formData.append('assignEmail', assignEmail);// Replace with appropriate user email value
    formData.append('dayIndex', dayIndex);
    
  try {
    const response = await fetch(`${process.env.REACT_APP_URL}/api/submit-task`, {
      method: 'POST',
      body: formData,
      
    });
  
    if (!response.ok) {
      const result = await response.json();
      console.error('Submission failed:', result);
      notification.error({message:`Submission failed: ${result.message}`});
      return;
    }

    // console.log('File uploaded successfully:', await response.json());
   
    notification.success({message:'File uploaded successfully!'});
     // Reload the page after successful submission
     window.location.reload();
  } catch (error) {
    console.error('Error during submission:', error);
    notification.error(`Error during submission: ${error.message}`);
  }
};


  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error.message}</div>;
  if (!task) return <div>No task found for this employee.</div>;

  // Format start and end dates using date-fns
  const formattedStartDate = format(new Date(task.startDate), 'dd MMM yyyy');
  const formattedEndDate = format(new Date(task.endDate), 'dd MMM yyyy');

  const totalDays = Math.ceil((new Date(task.endDate) - new Date(task.startDate)) / (1000 * 60 * 60 * 24));
  const count=task.submissions.length
  // console.log(count,"count")

  return (
    <div className="page-container">
      <EmployeeSidebar />
      <div className="task-module-container">
        <div className="container border p-5 m-2   rounded bg-secondary ">
          <h2 className="text-center mb-4">{task.taskName}</h2>
         
          <center>
          <b><h2 className="mb-4">Module ID: {task.moduleId}</h2></b>
          <h2>
            Upload the Daily Work Here ...!
          </h2>
          </center>
          {/* <p><b>Problem statement :</b> Success is built on consistency and commitment. Let's push through, stay focused, and complete our tasks on time. 
  Your task started on {formattedStartDate} and is due by {formattedEndDate}. 
  Together, we can achieve great things! Stay focused and give it your best effort!</p> */}
        </div>

        {/* Progress Bar */}
        <div className="mb-4 p-5 ">
          <Progressbar moduleID={task.moduleId} />
        </div>

        {/* Submission for Each Day */}
        <div className="submission-grid row">
          {[...Array(totalDays)].map((_, index) => (
            <div key={index} className="col-12 col-md-4 col-lg-3 mb-4">
              <div className="submission-item p-3 border rounded">
                <label htmlFor={`file-input-Day-${index + 1}`} className="form-label">
                  Upload File for Day-{index + 1}
                </label>
                <input type="file" id={`file-input-Day-${index + 1}`} className="form-control mb-2" disabled={index < count} />
                <center>
                  <button
                    className={`btn w-20 ${index < count ? 'btn-secondary' : 'btn-primary'}`}
                    onClick={() => handleSubmission(index + 1)}
                    disabled={index < count} // Disable button if the day's submission exists
                  >
                    Day-{index + 1}
                  </button>
                </center>

              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default TaskModules;
-------------------------------------------------------------------------------------------------------------------------
// Ensure the uploads folder exists
const uploadDirectory = path.join(__dirname, '../uploads');
if (!fs.existsSync(uploadDirectory)) {
    fs.mkdirSync(uploadDirectory, { recursive: true });
}

// Multer configuration for file uploads
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, uploadDirectory);
    },
    filename: (req, file, cb) => {
        cb(null, Date.now() + '-' + file.originalname);
    }
});